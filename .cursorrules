# Cursor AI Rules for Gaza Death Toll Admin Tools

## 📋 Project Context

**What**: Internal admin control panel for managing Gaza Death Toll database  
**Purpose**: Data management, bulk uploads, community moderation  
**Status**: ✅ Production-ready, all core features complete

**Tech Stack**:
- Next.js 15 (App Router, Server Components)
- PostgreSQL + Prisma ORM
- Clerk (authentication, role-based access)
- shadcn/ui (UI components - MANDATORY)
- Vercel Blob (photo storage)
- Tailwind CSS 4

**Key Documentation**:
- `docs/PROJECT.md` - Complete project details, features, setup
- `docs/engineering_spec.md` - Database schema, API architecture
- `docs/API_DOCUMENTATION.md` - API endpoint reference
- `CONTRIBUTING.md` - Contribution guidelines

---

## 🚀 Development Philosophy: Move Fast, No Cruft

### CRITICAL: Zero Backwards Compatibility

**"When we delete, we delete clean. No legacy code. No transition periods. No cruft."**

#### Core Principles

1. **No Backwards Compatibility**
   - Don't write code to support old/deprecated features
   - Don't add "if legacy then..." conditional logic
   - Don't keep old columns/tables "just in case"

2. **Clean Deletions Only**
   - When removing a feature, remove ALL related code
   - Delete migrations that added deprecated features
   - Remove documentation for old approaches
   - No comments like "// TODO: remove after migration"

3. **Fresh Start > Gradual Migration**
   - If backwards compatibility is complex, DROP the database and start fresh
   - It's okay to lose dev/staging data to maintain clean code
   - Production migrations should be forward-only, never dual-mode

4. **Examples of What NOT to Do**
   ```typescript
   ❌ const file = upload.rawFile || upload.fileUrl;  // Supporting old and new
   ❌ if (upload.rawFile) { /* legacy path */ }       // Backwards compat logic
   ❌ rawFile: Bytes?  // Deprecated: use fileUrl    // Keeping dead columns
   ```

5. **Examples of What TO Do**
   ```typescript
   ✅ const file = upload.fileUrl;                    // Only new way
   ✅ DROP COLUMN "rawFile";                          // Delete completely
   ✅ DELETE FROM records WHERE new_field IS NULL;    // Clean slate
   ```

#### Decision Framework

When removing/changing a feature:

```
Q: "Can we make this backwards compatible?"
A: NO. Delete the old code entirely.

Q: "But what about existing data?"
A: Delete it or migrate it ONCE, then remove migration code.

Q: "Should we keep the old code during transition?"
A: NO. Make the change, test, commit. No transition periods.

Q: "What if something breaks?"
A: Fix forward or revert completely. Never add backwards compat as a fix.
```

#### In Practice

- **Schema Changes**: Drop columns immediately after data migration
- **API Changes**: Update all consumers, no versioning (internal tool)
- **File Storage**: Move to new system, delete old references entirely
- **Features**: Remove completely or keep completely, no half-states

#### Why This Matters

- **Faster Development**: No maintenance burden of dual systems
- **Cleaner Codebase**: Easy to understand, no historical baggage
- **Better Testing**: Only one path to test, not multiple
- **Easier Debugging**: No "which version am I dealing with?" questions

**Remember**: This is an internal admin tool, not a public API. We control all consumers. Move fast.

---

## 🎨 UI Component Standards

### MANDATORY: Always Use shadcn/ui
**NEVER build custom UI components. ALWAYS use shadcn/ui first.**

Before writing ANY UI code:
1. Search shadcn registry: `npx shadcn@latest search [keyword]`
2. If component exists → install and use it
3. If not → combine existing shadcn components
4. Only build custom as absolute last resort (rare)

### Quick Reference
- Buttons → `<Button>` from `@/components/ui/button`
- Forms → `<Form>` + `<Field>` from `@/components/ui/form`
- Tables → `<Table>` from `@/components/ui/table`
- Cards → `<Card>` from `@/components/ui/card`
- Alerts → `<Alert>` from `@/components/ui/alert`
- Loading → `<Spinner>` or `<Skeleton>`

### Anti-Patterns (DON'T DO THIS)
❌ `<button className="px-4 py-2 bg-blue-500 ...">` 
✅ `<Button>Click me</Button>`

❌ `<div className="bg-white rounded-lg shadow p-6">`
✅ `<Card><CardContent>...</CardContent></Card>`

❌ Custom table with Tailwind classes
✅ `<Table>` component

## 📦 Available Components

All shadcn components are installed in `src/components/ui/`. Check this directory first.

See full list: `ls src/components/ui/`

## 🎯 Component Discovery Process

```
1. Need UI element?
   ↓
2. Check: Does shadcn have it?
   Command: npx shadcn@latest search [keyword]
   ↓
3. YES → Install: npx shadcn@latest add [component]
   ↓
4. NO → Can I combine shadcn components?
   ↓
5. RARE → Build custom (document why)
```

## 🚫 What NOT to Build

Never create custom versions of these (use shadcn instead):
- Buttons, inputs, textareas, selects
- Cards, alerts, badges
- Tables, dialogs, modals
- Tabs, accordions, dropdowns
- Loading spinners, skeletons
- Forms and form fields
- Toasts, tooltips

## 📝 Styling Standards

Use shadcn color tokens (NOT raw Tailwind colors):
- `text-foreground` (not `text-gray-900`)
- `text-muted-foreground` (not `text-gray-600`)
- `bg-background` (not `bg-gray-50`)
- `bg-card` (not `bg-white`)
- `border` (not `border-gray-200`)
- `text-destructive` (not `text-red-600`)
- `text-primary` (not `text-blue-600`)

## 🏗️ Development Standards

### Code Style
- **TypeScript**: Strict mode enabled, no `any` types
- **Async/Await**: Use async/await, not `.then()` chains
- **Server Components**: Default to server components, only use `'use client'` when needed
- **Error Handling**: Always wrap API calls in try/catch blocks
- **Next.js Components**: 
  - ALWAYS use `<Image>` from `next/image`, NEVER `<img>`
  - ALWAYS use `<Link>` from `next/link` for internal links, NOT `<a>`
  - Only use `<a>` for external links (with `target="_blank"`)

### Database Changes
```bash
# Edit schema
vim prisma/schema.prisma

# Create migration
npx prisma migrate dev --name description

# Generate client
npx prisma generate
```

### Authentication
- Role-based access control: **Admin**, **Moderator** (stored in Clerk publicMetadata)
- **Community** = ANY logged-in user (NOT a role, just authenticated)
- Use Clerk's `useAuth()`, `useUser()` in client components
- Use `auth()`, `currentUser()` in server components
- Always check roles before granting access to staff-only features
- Community submissions: Accessible to ALL logged-in users

---

## 📚 Documentation

**Essential Reading**:
1. `docs/PROJECT.md` ⭐ - Project status, features, setup
2. This file (`.cursorrules`) - Development standards
3. `docs/engineering_spec.md` - Database schema, architecture

**Reference**:
- `docs/API_DOCUMENTATION.md` - API endpoints
- `CONTRIBUTING.md` - How to contribute
- Official shadcn: https://ui.shadcn.com/docs

## 🔄 Adding New Components

```bash
# Always add from shadcn, never build from scratch
npx shadcn@latest add [component-name]

# View examples first
npx shadcn@latest view @shadcn/[component]-demo
```

## ✅ Code Review Checklist

Before submitting any UI changes:
- [ ] Using shadcn components (not custom)
- [ ] Using shadcn color tokens (not raw colors)
- [ ] Checked shadcn registry first
- [ ] No duplicate/custom buttons/cards/forms
- [ ] Documented if custom component is truly necessary

## 💡 Philosophy

### UI Components
**"If shadcn has it, use it. Period."**

This project uses shadcn/ui as the single source of truth for all UI components. This ensures:
- Consistent design throughout the app
- Accessibility built-in
- Easier maintenance
- Faster development
- Better developer experience

### Code Quality
- **DRY**: Don't repeat yourself - extract reusable logic
- **Type Safety**: Leverage TypeScript, define proper interfaces
- **Performance**: Use server components by default, minimize client-side JavaScript
- **Security**: Validate all inputs, check permissions, sanitize data

---

## 🚀 Quick Commands

```bash
# Development
npm run dev                          # Start dev server
npm run lint                         # Run linter

# Database
npx prisma studio                    # Open database GUI
npx prisma migrate dev               # Create and apply migration
npx prisma generate                  # Regenerate Prisma client

# shadcn
npx shadcn@latest search [keyword]   # Search for component
npx shadcn@latest add [component]    # Add component
npx shadcn@latest view @shadcn/[component]-demo  # View example
```

---

## 🎯 For AI Agents: Quick Context

**Project**: Admin tools for Gaza Death Toll database  
**Status**: All features complete, production-ready  
**Your Job**: Maintain, fix bugs, add minor features

**Before Coding**:
1. ✅ Check `docs/PROJECT.md` for current features
2. ✅ Use shadcn for ALL UI (see above)
3. ✅ Follow TypeScript/Next.js best practices
4. ✅ Check `docs/engineering_spec.md` for database schema
5. ✅ **NEVER add backwards compatibility code** (see philosophy above)

**Common Tasks**:
- Fix bugs: Check error logs, trace through code
- Add UI: Always use shadcn components
- Database changes: Update schema → migrate → generate
- New features: Follow existing patterns in codebase
- Remove features: Delete ALL related code, no half-measures

**Critical Reminder**:
- No legacy code support
- No "if old then..." logic
- Clean deletions only
- Move fast, no cruft

---

**Last Updated**: 2025-10-06  
**Status**: ✅ Production-ready, all core features complete  
**Philosophy**: 🚀 Move fast, no cruft, zero backwards compatibility  
**Documentation**: See `docs/PROJECT.md` for complete details

