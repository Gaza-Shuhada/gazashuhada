// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum ChangeSourceType {
  BULK_UPLOAD
  COMMUNITY_SUBMISSION
  MANUAL_EDIT
}

enum ChangeType {
  INSERT
  UPDATE
  DELETE
}

enum SubmissionType {
  NEW_RECORD
  EDIT
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
  SUPERSEDED
}

enum DecisionAction {
  UPDATE
  DELETE
}


model Person {
  id                String            @id @default(uuid())
  externalId        String            @unique
  name              String
  nameEnglish       String?           // English translation of name (from MOH name_en)
  gender            Gender
  dateOfBirth       DateTime?         // Nullable: some MOH records don't have DOB
  dateOfDeath       DateTime?
  locationOfDeathLat Float?           // Latitude coordinate
  locationOfDeathLng Float?           // Longitude coordinate
  obituary          String?
  photoUrlOriginal  String?           // Original uploaded image URL
  photoUrlThumb     String?           // Thumbnail (e.g., 512x512) URL
  confirmedByMoh    Boolean           @default(false) // true for bulk uploads, false for community submissions
  isDeleted         Boolean           @default(false)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  versions          PersonVersion[]
  submissions       CommunitySubmission[]
}

model PersonVersion {
  id                String            @id @default(uuid())
  personId          String
  externalId        String
  name              String
  nameEnglish       String?           // English translation of name (from MOH name_en)
  gender            Gender
  dateOfBirth       DateTime?         // Nullable: some MOH records don't have DOB
  dateOfDeath       DateTime?
  locationOfDeathLat Float?           // Latitude coordinate
  locationOfDeathLng Float?           // Longitude coordinate
  obituary          String?
  photoUrlOriginal  String?           // Original uploaded image URL
  photoUrlThumb     String?           // Thumbnail (e.g., 512x512) URL
  confirmedByMoh    Boolean           @default(false) // true for bulk uploads, false for community submissions
  versionNumber     Int
  sourceId          String
  changeType        ChangeType        @default(INSERT)
  isDeleted         Boolean           @default(false)
  createdAt         DateTime          @default(now())
  
  person            Person            @relation(fields: [personId], references: [id])
  source            ChangeSource      @relation(fields: [sourceId], references: [id])
  
  baseVersionSubmissions    CommunitySubmission[] @relation("BaseVersion")
  appliedVersionSubmissions CommunitySubmission[] @relation("AppliedVersion")
  
  @@unique([personId, versionNumber])
  @@index([personId])
  @@index([sourceId])
  @@index([sourceId, changeType])
  @@index([createdAt])
}

model ChangeSource {
  id                String              @id @default(uuid())
  type              ChangeSourceType
  description       String?
  createdAt         DateTime            @default(now())
  
  versions          PersonVersion[]
  bulkUpload        BulkUpload?
  communitySubmission CommunitySubmission?
}

model BulkUpload {
  id                String            @id @default(uuid())
  changeSourceId    String            @unique
  filename          String
  label             String            // Required: manual description/label for the upload
  dateReleased      DateTime          // Required: when the source data was published/released
  
  // Blob storage references
  fileUrl           String            // Vercel Blob URL
  fileSize          Int               // File size in bytes
  fileSha256        String            // SHA-256 hash for integrity verification
  contentType       String            @default("text/csv") // MIME type
  previewLines      String?           // Optional: gzipped first ~20 lines for quick preview (<10KB)
  
  uploadedAt        DateTime          @default(now())
  
  changeSource      ChangeSource      @relation(fields: [changeSourceId], references: [id], onDelete: Cascade)
}

model CommunitySubmission {
  id                      String            @id @default(uuid())
  type                    SubmissionType
  baseVersionId           String?           // NULL for NEW_RECORD submissions
  personId                String?           // NULL for NEW_RECORD submissions
  proposedPayload         Json              // For NEW_RECORD: all fields; For EDIT: only date_of_death, location_of_death, obituary, photo_url
  reason                  String?           // Optional explanation for the submission
  submittedBy             String            // Clerk user ID
  status                  SubmissionStatus  @default(PENDING)
  createdAt               DateTime          @default(now())
  
  approvedBy              String?           // Clerk user ID
  approvedAt              DateTime?
  decisionAction          DecisionAction?
  decisionNote            String?
  approvedChangeSourceId  String?           @unique
  appliedVersionId        String?
  
  baseVersion             PersonVersion?    @relation("BaseVersion", fields: [baseVersionId], references: [id])
  person                  Person?           @relation(fields: [personId], references: [id])
  approvedChangeSource    ChangeSource?     @relation(fields: [approvedChangeSourceId], references: [id])
  appliedVersion          PersonVersion?    @relation("AppliedVersion", fields: [appliedVersionId], references: [id])
  
  @@index([personId])
  @@index([baseVersionId])
  @@index([status])
  @@index([submittedBy])
}

model AuditLog {
  id           String   @id @default(uuid())
  userId       String   // Clerk user ID who performed the action
  userEmail    String?  // User email for display (cached from Clerk)
  action       String   // Action type: BULK_UPLOAD_APPLIED, COMMUNITY_SUBMISSION_APPROVED, etc.
  resourceType String   // Resource type: BULK_UPLOAD, COMMUNITY_SUBMISSION, PERSON, USER
  resourceId   String?  // ID of the affected resource
  description  String   // Human-readable description
  metadata     Json?    // Additional context (stats, changes, etc.)
  ipAddress    String?  // IP address of the user
  createdAt    DateTime @default(now())
  
  @@index([userId, createdAt])
  @@index([resourceType, resourceId])
  @@index([createdAt])
  @@index([action])
}
